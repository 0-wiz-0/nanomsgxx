#!/usr/bin/env python
# encoding: utf-8
#
# Nanomsgxx doc build script.
from waflib.Task import Task
import os

class ronn(Task):

    def make_ronn_command(self):
        cmd = [
            'RONN_STYLE=' + self.env.basename,
            'ronn',
            '--organization', "'achille.roussel@gmail.com'",
            '--manual', 'nanomsgxx',
            self.inputs[0].abspath(),
        ]
        if self.env.docstyle == 'dark':
            cmd += ['--style', 'dark,nnxx,highlight-dark']
        else:
            cmd += ['--style', 'nnxx,highlight-light']
        return cmd

    def make_mv_command(self):
        return [
            'mv',
            self.outputs[0].abspath(),
            self.outputs[0].abspath() + '.tmp',
        ]

    def make_colorsyntax_command(self):
        return [
            os.path.join(self.env.basename, 'colorsyntax'),
            '-s',
            'monokai',
            '<',
            self.outputs[0].abspath() + '.tmp',
            '>',
            self.outputs[0].abspath(),
        ]

    def make_rm_command(self):
        return [
            'rm',
            '-f',
            self.outputs[0].abspath() + '.tmp',
        ]

    def make_command(self):
        return                                         \
            self.make_ronn_command()        + ['&&'] + \
            self.make_mv_command()          + ['&&'] + \
            self.make_colorsyntax_command() + ['&&'] + \
            self.make_rm_command()

    def run(self):
        return self.exec_command(' '.join(self.make_command()))

def html_output_file(waf, input_file):
    name = input_file.name.replace('.ronn', '.html')
    path = input_file.parent.abspath()[len(waf.path.abspath()):]
    return waf.path.make_node(os.path.join(path, name))

def roff_output_file(waf, input_file):
    name = input_file.name.replace('.ronn', '')
    path = input_file.parent.abspath()[len(waf.path.abspath()):]
    return waf.path.make_node(os.path.join(path, name))

def build(waf):
    waf.env.basename = waf.path.abspath()

    wscript     = waf.path.ant_glob('wscript')
    colorsyntax = waf.path.ant_glob('colorsyntax')
    css_files   = waf.path.ant_glob('**/*.css')
    idx_files   = waf.path.ant_glob('**/index.txt')
    html_files  = []
    roff_files  = []

    for input_file in waf.path.ant_glob('**/*.ronn'):
        html_file = html_output_file(waf, input_file)
        html_files.append(html_file)

        roff_file = roff_output_file(waf, input_file)
        roff_files.append(roff_file)

        ronn_task = ronn(env=waf.env)
        ronn_task.set_inputs([input_file] + css_files + idx_files + colorsyntax + wscript)
        ronn_task.set_outputs([html_file, roff_file])
        waf.add_to_group(ronn_task)

    waf.install_files(waf.env.install_html_path, html_files)

def configure(waf):
    assert waf.options.docstyle in ('dark', 'light')
    waf.load('python')
    waf.find_program('cat')
    waf.find_program('ronn')
    waf.check_python_version((2,6,0))
    waf.check_python_module('bs4')
    waf.check_python_module('pygments')
    waf.env.docstyle = waf.options.docstyle

def options(waf):
    waf.add_option('--docstyle', nargs=1, default='dark', help='the doc style (dark or light)')
    waf.add_option('--install-html-path', nargs=1, default='/usr/share/doc/nanomsgxx', help='where to install html doc')
